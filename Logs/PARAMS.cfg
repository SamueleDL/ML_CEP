PARAMETERS:
    
    public static int NRULES = 1;
	public static boolean bCOLLISIONS = false;
	public static boolean bXval = true;
	public static int K_STEP = 2;
	public static int MAX_K_P= 10;
	public static int MAX_K_N= 0;

	public static boolean iCEPenabled = true;
	public static final int NFOLDS = 3;
	
	public static final int PLIMIT = 6000;
	public static final int NLIMIT = 60000;
	public static final int PLIMIT_EVAL = 20000;
	public static final int NLIMIT_EVAL = 100000;
	public static final int WINDOW_SIZE = 10;

PARAM_HANDLER:
 public void prepareTest(List<Integer> params) {
	  
	  numEventTypes = params.get(0);
	  numValues = params.get(1);
	  numConstraints = params.get(2);
	  minNumAttributes = 2 * params.get(2);
	  maxNumAttributes = 2 * params.get(2);
	  numEventConstraints = params.get(3);
	  numNegationConstraints = 0;
	  numAggregateConstraints = 0;
	  numEventParameterConstraints = 0;
	  
  }
  
  
  private void resetToDefault() {
    numEventTypes = 5;
    minNumAttributes = 1;
    maxNumAttributes = 1;
    numValues = 50;
    valueDistribution = Distribution.UNIFORM;

    ruleGeneratorType = RuleGeneratorType.RANDOM;

    numEventConstraints = 2;
    numNegationConstraints = 1;
    numAggregateConstraints = 2;
    numEventParameterConstraints = 1;
    numNegationParameterConstraints = 0;
    numAggregateParameterConstraints = 0;

    numConstraints = 1;
    numConstraintsInAggregates = 0;
    numFilters = 1;
    numFiltersInAggregates = 0;
    minWinSize = 10;
    maxWinSize = 10;
    winDistribution = Distribution.UNIFORM;
    percEQ = 20;
    percLT = 40;
    percGT = 40;
    percDF = 0;
    seqProbability = 100;
    paramPercEQ = 0;
    paramPercLT = 50;
    paramPercGT = 50;
    paramPercDF = 0;
    aggPercEQ = 20;
    aggPercLT = 40;
    aggPercGT = 40;
    aggPercDF = 0;

    historyGeneratorType = HistoryGeneratorType.RANDOM;
    eventTypesDistribution = Distribution.UNIFORM;
    minDistanceBetweenEvents = 1;
    maxDistanceBetweenEvents = 2;
    distanceBetweenEventsDistribution = Distribution.UNIFORM;
    minDistanceBetweenEventsOfType = 1;
    maxDistanceBetweenEventsOfType = 50;
    distanceBetweenEventsOfTypeDistribution = Distribution.UNIFORM;
    numArtificialNegationsInHistory = Consts.NUM_ARTIFICIAL_NEGATIONS;
    distanceBetweenNoiseEvents = 30;
    minNumEventsPerAggregate = 2;
    maxNumEventsPerAggregate = 5;

    numArtificialCompositeEventsInHistory = 5000;
    numEventsInHistory = 50000;
    
    minWindowForEvaluation = 1;
    maxWindowForEvaluation = 50;
    winLearnerType = WindowLearningType.TAKE_MAXIMUM;
    winStepForEvaluation = 1;
    winStableAfter = 2;
    equalityParameterFrequencyThreshold = 0.95;
    equalityAggregateFrequencyThreshold = 0.95;
    negationFrequencyThreshold = 0.8;

    dublinkedTrainingFile = "Input/training.csv";
    dublinkedEvaluationFile = "Input/evaluation.csv";
    dublinkedNumLines = 10000;
  }



